version: '3'

services:
  # Airflow cluster
  redis:
    image: redis
    container_name: redis
    networks:
      shopee_net:
    volumes:
      - redis:/data

  postgres:
    image: postgres
    container_name: postgres
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
      - PGDATA=/var/lib/postgresql/data/pgdata
    networks:
      shopee_net:
    volumes:
      - postgres_data:/var/lib/postgresql/data
          
  airflow-webserver:
    image: puckel/docker-airflow:1.10.9
    container_name: airflow-webserver
    depends_on:
      - postgres
      - redis
    environment:
      - LOAD_EX=n
      - FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
      - EXECUTOR=Celery
    healthcheck:
      test: ["CMD-SHELL", "[ -f /usr/local/airflow/airflow-webserver.pid ]"]
      interval: 30s
      timeout: 30s
      retries: 3
    ports:
      - "8282:8080"
    restart: always
    networks:
      shopee_net:
    volumes:
      - ./airflow/dags:/usr/local/airflow/dags
    command: webserver

  airflow-scheduler:
    image: puckel/docker-airflow:1.10.9
    container_name: airflow-scheduler
    depends_on:
      - airflow-webserver
    environment:
      - LOAD_EX=n
      - FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
      - EXECUTOR=Celery
    restart: always
    networks:
      shopee_net:
    volumes:
      - ./airflow/dags:/usr/local/airflow/dags      
    command: scheduler

  airflow-worker:
    image: puckel/docker-airflow:1.10.9
    container_name: airflow-worker
    depends_on:
      - airflow-scheduler
    environment:
      - FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
      - EXECUTOR=Celery
    restart: always
    networks:
      shopee_net:
    volumes:
      - ./airflow/dags:/usr/local/airflow/dags
      - ./demo_data/data:/usr/local/airflow/data
    command: worker


  # Spark - Iceberg
  spark-iceberg:
    image: tabulario/spark-iceberg
    build: spark/
    container_name: spark-iceberg
    depends_on:
      - rest
      - minio
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
    ports:
      - 8888:8888
      - 8080:8080
      - 10000:10000
      - 10001:10001
    networks:
      shopee_net:
    volumes:
      - iceberg_warehouse:/home/iceberg/warehouse
      - iceberg_notebooks:/home/iceberg/notebooks/notebooks
      - ./spark:/home/iceberg/code

  rest:
    image: tabulario/iceberg-rest
    container_name: iceberg-rest
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
      - CATALOG_WAREHOUSE=s3://warehouse/
      - CATALOG_IO__IMPL=org.apache.iceberg.aws.s3.S3FileIO
      - CATALOG_S3_ENDPOINT=http://minio:9000
    ports:
      - 8181:8181
    networks:
      shopee_net:


  # Minio cluster
  minio:
    image: minio/minio
    container_name: minio
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
      - MINIO_ACCESS_KEY=admin
      - MINIO_SECRET_KEY=password
      - MINIO_DOMAIN=minio
    ports:
      - 9001:9001
      - 9000:9000
    networks:
      shopee_net:
        aliases:
          - warehouse.minio
    volumes:
      - data:/data
    command: ["server", "/data", "--console-address", ":9001"]

  mc:
    image: minio/mc
    container_name: mc
    depends_on:
      - minio
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
    networks:
      shopee_net:
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://minio:9000 admin password) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc mb minio/warehouse;
      /usr/bin/mc policy set public minio/warehouse;
      tail -f /dev/null
      "


  # Trino cluster
  trino:
    image: trinodb/trino
    container_name: trino
    ports:
      - "8383:8080"
    networks:
      shopee_net:
    volumes:
      - ./trino/etc:/usr/lib/trino/etc:ro
      - ./trino/catalog:/etc/trino/catalog
      - ./trino/code:/etc/trino/code

  metastore_db:
    image: postgres
    container_name: metastore_db
    environment:
      POSTGRES_USER: hive
      POSTGRES_PASSWORD: hive
      POSTGRES_DB: metastore
    networks:
      shopee_net:
    volumes:
      - metastore_db:/var/lib/postgresql/data

  hive-metastore:
    container_name: hive-metastore
    image: starburstdata/hive:3.1.2-e.18
    depends_on:
      - metastore_db
    environment:
      HIVE_METASTORE_DRIVER: org.postgresql.Driver
      HIVE_METASTORE_JDBC_URL: jdbc:postgresql://metastore_db:5432/metastore
      HIVE_METASTORE_USER: hive
      HIVE_METASTORE_PASSWORD: hive
      HIVE_METASTORE_WAREHOUSE_DIR: s3://warehouse/
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: admin
      S3_SECRET_KEY: password
      S3_PATH_STYLE_ACCESS: "true"
      REGION: ""
      GOOGLE_CLOUD_KEY_FILE_PATH: ""
      AZURE_ADL_CLIENT_ID: ""
      AZURE_ADL_CREDENTIAL: ""
      AZURE_ADL_REFRESH_URL: ""
      AZURE_ABFS_STORAGE_ACCOUNT: ""
      AZURE_ABFS_ACCESS_KEY: ""
      AZURE_WASB_STORAGE_ACCOUNT: ""
      AZURE_ABFS_OAUTH: ""
      AZURE_ABFS_OAUTH_TOKEN_PROVIDER: ""
      AZURE_ABFS_OAUTH_CLIENT_ID: ""
      AZURE_ABFS_OAUTH_SECRET: ""
      AZURE_ABFS_OAUTH_ENDPOINT: ""
      AZURE_WASB_ACCESS_KEY: ""
      HIVE_METASTORE_USERS_IN_ADMIN_ROLE: "admin"
    ports:
      - '9083:9083' # Metastore Thrift
    networks:
      shopee_net:

  superset:
    build: ./superset
    container_name: superset
    environment:
      - SUPERSET_SECRET_KEY=secret
    ports:
      - "8088:8088"
    networks:
      shopee_net:
    volumes:
      - superset_data:/app/superset_home


networks:
  shopee_net:


volumes:
  redis:
  postgres_data:
  iceberg_warehouse:
  iceberg_notebooks:
  data:
  metastore_db:
  superset_data: